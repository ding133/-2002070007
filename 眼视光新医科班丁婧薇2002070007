
练习
multiples_of_pi<-new.env()  
multiples_of_pi[["two_pi"]]<-c(2*pi)
multiples_of_pi$three_pi<-polyroot(c(3*pi))
assign(
  "four_pi",
  numeric(as.numeric("4*pi")),
  multiples_of_pi
)
ls(envir=multiples_of_pi) 
multiples_of_pi[["two_pi"]]
multiples_of_pi[["three_pi"]]
multiples_of_pi[["four_pi"]]
www <- function(x)
(a_list <- list(
  c(1,1,2,5,14,42),  
  month.abb,  
  matrix(c(3,-8,1,-3),nrow = 2),  
  asin  
))  
names(a_list) <- c("catalan","months","involutary","arcsin")
a_list
(main_list <- list(
  middle_list = list(  
    element_in_middle_list = diag(3),    
    inner_list = list(    
      element_in_inner_list = pi ^ (1:4),      
      another_element_in_inner_list = "a"      
    )      
  ),    
  element_in_main_list = log10(1:10)  
))  
is.atomic(list())
is.recursive(list())
is.atomic(numeric())
is.recursive(numeric())
length(a_list)
length(main_list)
dim(a_list)
nrow(a_list)
ncol(a_list)
NROW(a_list)
NCOL(a_list)
l1 <- list(1:5)
l2 <- list(6:10)
l1[[1]]+l2[[1]]
l <- list(
  first=1,  
  second=2,  
  third=list(  
    alpha=3.1,    
    beta=3.2    
  )    
)  
l<-list(first=1,second=2,third=list(alpha=3.1,beta=3.2))
l[1:2]
l[-3]
l[c(TRUE,TRUE,FALSE)]
l[[1]]
l[["first"]]
is.list(l[1])
is.list(l[[1]])
l$first
l$f
l[["third"]]["beta"]
l[["third"]][["beta"]]
l[[c("third","beta")]]
is.list(l[["third"]]["beta"])
is.list(l[["third"]][["beta"]])
l[c(4,2,5)]
l[c("fourth","second","fifth")]
l[["fourth"]]
l$fourth
1[[4]]
busy_beaver <- c(1,6,21,107)
as.list(busy_beaver)
as.numeric(list(1,6,21,107))
(prime_factors <- list(                
  two=2,  
  three=3,  
  four=c(2,2),  
  five=5,  
  six=c(2,3),
  seven=7,  
  eight=c(2,2,2),  
  nine=c(3,3),  
  ten=c(2,5)  
))  
as.numeric(prime_factors)
new_factors<-unlist(prime_factors)
new_factors
new1 <- unlist(list(1,6,21,107))
new1
new_factors[1]
new_factors[[1]]
is.list(prime_factors)
is.list(new_factors)
is.list(new_factors[1])
is.list(new_factors[[1]])
c(list(a=1,b=2),list(3))
c(list(a=1,b=2),3)
matrix_list_hybrid<-cbind(list(a=1,b=2),list(c=3,list(d=4)))
matrix_list_hybrid
str(matrix_list_hybrid)
china_holiday<-list(
  jan="new year's day",  
  feb="spring festival",  
  mar=NULL,  
  apr="qingming festival",
  may="may day",  
  jun="dragon boat festival",  
  jul=NULL,  
  aug=NULL,  
  sep="moon festival",  
  oct="national day",  
  nov=NULL,  
  dec=NULL  
)
length(NULL)
length(NA)
is.null(NULL)
is.null(NA)
is.na(NULL)
china_holiday$sep<-NULL
china_holiday
china_holiday$jun<-list(NULL)
china_holiday
(argument_of_sd <- formals(sd))
class(argument_of_sd<-formals(sd))
pairlist()
list()
(a_data_frame<-data.frame(
  x=letters[1:5],  
  y=rnorm(5),  
  z=runif(5)>0.5  
))  
class(a_data_frame)
y <-rnorm(5)
names(y)<-month.name[1:5]
data.frame(
  x=letters[1:5],  
  y=y,
  z=runif(5)>0.5
)  
data.frame(
  x=letters[1:5],  
  y=y,  
  z=runif(5)>0.5,
  row.names=NULL  
)  
data.frame(
  x=letters[1:5],  
  y=y,  
  z=runif(5)>0.5,  
  row.names=c("jackie","tito","jermaine","marlon","michael")  
)  
rownames(a_data_frame)
colnames(a_data_frame)
dimnames(a_data_frame)
nrow(a_data_frame)
ncol(a_data_frame)
dim(a_data_frame)
length(a_data_frame)
names(a_data_frame)
data.frame(
  x=1,  
  y=2:3,  
  z=4:7  
)  
data.frame(
  x=1,  
  y=2:3,  
  z=4:6  
)  
data.frame(
  "a column"=letters[1:5],  
  "..."=rnorm(5),  
  "..."=runif(5)>0.5,  
  check.names=TRUE  
)  
a_data_frame[2:3,-3]
a_data_frame[c(FALSE,TRUE,TRUE,FALSE,FALSE),c("x","y")]
a_data_frame[2:3,1]
class(a_data_frame[2:3,-3])
class(a_data_frame[2:3,1])
a_data_frame$x[2:3]
a_data_frame[[1]][2:3]
a_data_frame[["x"]][2:3]
a_data_frame[a_data_frame$y>0|a_data_frame$z,"x"]
subset(a_data_frame,y>0|z,x)
t(a_data_frame)
class(t(a_data_frame))
another_data_frame<-data.frame(
  z=rlnorm(5),  
  y=sample(5),  
  x=letters[3:7]  
)  
rbind(a_data_frame,another_data_frame)
cbind(a_data_frame,another_data_frame)
merge(a_data_frame,another_data_frame,by="x")
merge(a_data_frame,another_data_frame,by="x",all=TRUE)
colSums(a_data_frame[,2:3])
colMeans(a_data_frame[,2:3])
(b_list<-list(
  c(0:9^2),  
  c(10:19^2),  
  c(20:29^2),
  c(30:39^2),  
  c(40:49^2),  
  c(50:59^2),  
  c(60:69^2),  
  c(70:79^2),  
  c(80:89^2),  
  c(90:99^2)  
))  
iris 
an_environment<-new.env()
an_environment
an_environment[["pythag"]]<-c(12,15,20,21)
an_environment$root<-polyroot(c(6,-5,1))
assign(
  "moonday",  
  weekdays(as.Date("1969/07/02")),  
  an_environment  
)  
an_environment[["pythag"]]
an_environment$root
get("moonday",an_environment)
ls(envir=an_environment)
ls.str(envir=an_environment)
exists("pythag",an_environment)
(a_list <-as.list(an_environment))
as.environment(a_list)
list2env(a_list)
inherits=FALSE
nested_environment <- new.env(parent=an_environment)
exists("pythag",nested_environment)
exists("pythag",nested_environment,inherits=FALSE)
non_stormers <<-c(3,7,8,13,17,18,21)
get("non_stormers",envir=globalenv())
head(ls(envir=baseenv()),20)
hypotenuse <- function(x,y){
  sqrt(x^2+y^2)  
}  
hypotenuse(3,4)
hypotenuse(x=29,y=99)
hypotenuse<-function(x=5,y=12){
  sqrt(x^2+y^2)  
}  
hypotenuse()
formals(hypotenuse)  
args(hypotenuse)
formalArgs(hypotenuse)
(body_of_hypoternuse<-body(hypotenuse))
deparse(body_of_hypoternuse)
normalize<-function(x,m=mean(x),s=sd(x)){
  (x-m)/s  
}  
normalized<-normalize(c(1,3,6,10,15))
mean(normalized)
sd(normalized)
normalize(c(1,3,6,10,NA))
normalize(c(1,3,6,10,NA),na.rm=TRUE)
normalize <- function(x,m=mean(x,...),s=sd(x,...),...){
  (x-m)/s
}  
normalize(c(1,3,6,10,NA))
normalize(c(1,3,6,10,NA),na.rm=TRUE)
do.call(hypotenuse,list(x=3,y=4))
dfr1<-data.frame(x=1:5,y=rt(5,1))
dfr2<-data.frame(x=6:10,y=rt(5,1,1))
dfr3<-data.frame(x=6:10,y=rbeta(5,1,1))
do.call(rbind,list(dfr1,dfr2,dfr3))
menage<-c(1,0,0,1,2,13,80)
mean(menage)
mean(c(1,0,0,1,2,13,80))
x_plus_y <- function(x,y)x+y
do.call(x_plus_y,list(1:5,5:1))
emp_cun_dist_fn <-ecdf(rnorm(50))
is.function(emp_cun_dist_fn)
f <-function(x9){
  y9<-1
  g<-function(y9){
    (x9+y9)/2
  }
  g(x9)
}
f(sqrt(5))
f<-function(x8){
  y8<-1
  g(x8)
}
g<-function(y8){
  (x8+y8)/2
}
f(sqrt(5))
h<-function(x10){
  x10*y10
}
h(9)
y10<-19  
h(9)
y11<-19
h2<-function(x11){
  if(runif(1)>0.5)y11<-12
  x11*y11
}
replicate(10,h2(9))




第二次作业
n <- 1:20
x <- n*(n+1)/2
names(x) <- letters[1:20]
x 
a <- c(1:10,10:1)
diag(a) 
8.5:4.5
c(1,1:3,c(5,8),13)
vector("numeric",5)
vector("complex",5)
vector("logical",5)
vector("character",5)
vector("list",5)
numeric(5)
complex(5)
logical(5)
character(5)
seq.int(3,12)
seq.int(0.1,0.01,-0.01)
n <- 0
1:n
seq_len(n)
pp <- c("peter","piper","picked","a","peck","of","picked","peppers")
for(i in seq_along(pp))print(pp[i])
length(1:5)
length(c(TRUE,FALSE,NA))
sn <- c("sheena","leads","needs")
length(sn)
nchar(sn)
pointcare <- c(1,0,0,0,0,0,0)
length(pointcare) <- 3
pointcare
length(pointcare) <- 10
pointcare
c(apple=1,banana=2,"kiwi fruit"=3,4)
x <- 1:4
names(x) <- c("apple","banana","kiwi fruit","")
x
names(x)
names(1:4)
x <- (1:5)^2
x
x[c(1,3,5)]
x[c(-2,-4)]
x[c(TRUE,FALSE,TRUE,FALSE,TRUE)]
x <- (1:5)^2
x
names(x) <- c("one","four","nine","sixteen","twentyfive")
x[c("one","four","twentyfive")]
x[c(1,NA,5)]
x[c(TRUE,FALSE,NA,FALSE,TRUE)]
x[6]
x[1.9]
x[-1.9]
x[]
which(x>10)
which.min(x)
which.max(x)
1:5 + 1
1 +1:5
1:5+1:15
1:5+1:7
rep(1:5,3)
rep(1:5,each=3)
rep(1:5,times = 1:5)
rep(1:5,length.out = 7)
rep.int(1:5,3)
rep_len(1:5,13)
(three_d_array <- array(
  1:24,  
  dim = c(4,3,2),
  dimnames = list(
    c("one","two","three","four"),  
    c("ein","zwei","drei"),  
    c("un","deux")  
  )
)) 
dim(three_d_array)
nrow(three_d_array)
ncol(three_d_array)
length(three_d_array)
dim(three_d_array) <- c(6,4)
three_d_array
identical(nrow(three_d_array),NROW(three_d_array))
recaman <- c(0,1,3,5,7,9)
nrow(recaman)
NROW(recaman)
ncol(recaman)
NCOL(recaman)
rownames(three_d_array)
colnames(three_d_array)
dimnames(three_d_array)
练习
x <- atan(1/1:1000)
x
x <- 1:1000
y <- atan(1/x)
y
z <- 1/tan(y)
z
identical(x,z)
x == z
all.equal(x,z)
all.equal(x,z,0)
true_and_missing <- TRUE
false_and_missing <- FALSE
mixed <- NA
any(true_and_missing = TRUE)
any(false_and_missing = FALSE)
any(mixed = NA)
all(true_and_missing = TRUE)
all(false_and_missing = FALSE)
all(mixed = NA)
class(Inf)
class(NA)
class(NaN)
class("")
gender_char <- sample(c("dog","cat","hamster","goldfish"),1000,replace = TRUE)
(gender <- factor(gender_char))
summary(gender)
peach <- 1
tomato <- 2
potato <- 3
ls(pattern = "a")
课堂上
1:5 + 6:10
c(1,3,6,10,15)+c(0,1,3,6,10)
x <- c(0.5,0.6)
sum(1:5)
median(1:5)
mean(1:9)
sum(1,2,3,4,5)
median(1,2,3,4,5)
mean(1,2,3,4,5)
mean(2,2,3,4,5)
c(2,3,5,7,11,13) -2
-2:2*-2:2
1:10/3
abs(-9)
abs(10)
sqrt(9)
log(10)
log10(10)
log(100,10)
log10(100)
1.23e5
identical(2^3,2**3)
pi
sin(30)
sin(1)
sin(pi/6)
sin(pi/2)
cos(c(0, pi / 4, pi / 2, pi))
round(3.1415926,3)
floor(3.1415926)
ceiling(3.1415926)
trunc(3.1415926)
factorial(9)
exp(pi * 1i) + 1
factorial(7) + factorial(1) - 71 ^ 2
choose(5, 0:5)
c(3,4-1,1+1+1) == 3
1:3 != 3:1
exp(1:5)<100
(1:5) ^ 2 >= 16
sqrt(2)^2 == 2
sqrt(2) ^ 2 - 2
all.equal(sqrt(2) ^ 2 , 2)
all.equal(sqrt(2) ^ 2 , 3)
isTRUE(all.equal(sqrt(2) ^ 2 , 3))
c( "Can", "you", "can", "a", "can", "as", "a", "canner", "can", "can") =="can"
c("A","B","C","D")<"C"
c("a","b","c","d")<"C"
x <- 5:10
y = 2:7
x + 2*y-3
c(Inf+1,Inf-1,Inf-Inf)
c(1/Inf,Inf/1,Inf/Inf)
c(sqrt(Inf),sin(Inf))
c(log(Inf),log(Inf,Inf))
c(NA+1,NA*5,NA+Inf)
c(NA+NA,NaN+NaN,NaN+NA,NA+NaN)
x3 <- c(0,Inf,-Inf,NaN,NA)
is.finite(x3)
is.infinite(x3)
is.nan(x3)
is.na(x3)
x4 <- 1:10 >=5
!x4
y4 <- 1:10 %% 2 ==0
x4|y4
x4&y4
class(sqrt(1:10))
class(3+1i)
class(1)
class(1L)
class(0.5:4.5)
class(1:5)
(gender <- factor(c("male","female","male","female")))
levels(gender)
nlevels(gender)
as.integer(gender)
gender_char <- sample(c("female","male"),10000,replace = TRUE)
gender_fac <- as.factor(gender_char)
object.size(gender_char)
object.size(gender_fac)
as.character(gender)
is.character("red lorry,yellow lorry")
is.logical(FALSE)
is.list(list(a=1,b=2))
is(gender,"factor")
is.factor(gender)
is.numeric(1)
is.numeric(1L)
is.integer(1)
is.integer(1L)
is.double(1)
is.double(1L)
x <- "123.456"
as(x,"numeric")
as.numeric(x)
y <- c(2,12,343,34997)
as(y,"data.frame")
as.data.frame(y)
x <-"123.456"
class(x) <- "numeric"
is.numeric(x)
y <- c(1,2,3,4,5,6,7)
for(i in y)i
for(i in y)print(i)
num <- runif(30)
summary(num)
letters
letters[1:5]
LETTERS
fac <- factor(sample(letters[1:5],30,replace = TRUE))
summary(fac)
bool <- sample(c(TRUE,FALSE,NA),30,replace = TRUE)
summary(bool)
attributes(fac)
View(bool)
new_bool <- edit(bool)
peach <- 1
plum <- "fruity"
pear <- TRUE
is(bool)
ls.str()
ls()
browseEnv()
ls()
rm(bool)
ls()
rm(list=ls())
ls()
